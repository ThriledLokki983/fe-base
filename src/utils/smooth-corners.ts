// if ('paintWorklet' in CSS) {
//   CSS.paintWorklet.addModule(
//     `data:text/javascript,registerPaint('smooth-corners',class{static get inputProperties(){return['--smooth-corners']}paint(ctx,size,properties){const radius=Number(properties.get('--smooth-corners').toString().replace('px',''))||16;const c=0.45;const width=size.width;const height=size.height;const points=[[0,radius],[radius,0],[width-radius,0],[width,radius],[width,height-radius],[width-radius,height],[radius,height],[0,height-radius]];ctx.beginPath();ctx.moveTo(points[0][0],points[0][1]);const cp1x=(points[0][0]+points[1][0])/2;const cp1y=(points[0][1]+points[1][1])/2;ctx.quadraticCurveTo(points[0][0],points[0][1],cp1x,cp1y);ctx.lineTo(points[1][0],points[1][1]);ctx.lineTo(points[2][0],points[2][1]);const cp2x=(points[2][0]+points[3][0])/2;const cp2y=(points[2][1]+points[3][1])/2;ctx.quadraticCurveTo(points[3][0],points[3][1],cp2x,cp2y);ctx.lineTo(points[4][0],points[4][1]);const cp3x=(points[4][0]+points[5][0])/2;const cp3y=(points[4][1]+points[5][1])/2;ctx.quadraticCurveTo(points[4][0],points[4][1],cp3x,cp3y);ctx.lineTo(points[6][0],points[6][1]);const cp4x=(points[6][0]+points[7][0])/2;const cp4y=(points[6][1]+points[7][1])/2;ctx.quadraticCurveTo(points[7][0],points[7][1],cp4x,cp4y);ctx.closePath();ctx.fill()}})`
//   );
// }
